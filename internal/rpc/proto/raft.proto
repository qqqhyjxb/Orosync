syntax = "proto3";

package raft;

option go_package = "./raft;";  //

message SendUAVInfoReq {
  UAVInfo uav = 1;
}

// 无人机信息
message UAVInfo {
  string uid = 1;
  string time = 2;
  string address = 3;
  string port = 4;
  Position position = 5;
  Battery battery = 6;
  CPUInfo cpu = 7;
  MemoryInfo memory = 8;
  NetWorkInfo network = 9;
  repeated Task tasks = 10;   //当前这正负载所有无人机的信息
  string status = 11;
}

//任务信息
message Task {
  int32 task_id = 1;           //任务ID
  string type = 2;             //任务类型，分为abcd四种，a为电量密集型，b为计算密集型，c表示内存密集型，d表示同意网络密集型
  int32 priority = 3;          //任务优先级
  float required_cpu = 4;      // 任务执行所需的最低CPU能力
  float cpu_usage = 5;         //任务执行cpu占比
  float required_memory = 6;   // 任务执行所需的最低内存
  map<string, float> cost = 7; // 资源消耗速率（每秒消耗电量）
  Position target = 8;         // 目标位置（格式："x,y,z"）
  repeated int32 task_parents = 9;
  repeated int32 task_children = 10;
  string status = 11;          //任务状态0表示未开始，1表示已分配，2表示进行中，3表示已完成
  string duration = 12;   //任务持续时间
  string surplus = 13;    //任务剩余时间
}

// 位置信息
message Position{
  float x = 1;
  float y = 2;
  float z = 3;
}

// 电池状态
message Battery{
  float capacity = 1;
}

// cpu状态
message CPUInfo {
  float capacity = 1;          // 最大资源
  float surplus_capacity = 2;  // 剩余资源
  float usage_rate = 3;        // 剩余资源
}

// 内存内存
message MemoryInfo {
  float capacity = 1;            // 最大资源
  float surplus_capacity = 2;    // 剩余资源
  float usage_rate = 3;          // 使用率
}

// 网络状态
message NetWorkInfo {
  float bandwidth = 1;   // 带宽
  float delay = 2;       // 延迟
}

message SendUAVInfoResp {
  string code = 1;
  string leader_uid = 2;
}

// leader: 日志分发
message AppendLogReq {
  int64 term = 1;
  string leader_uid = 2;
  int64 prev_log_index = 3;
  int64 prev_log_term = 4;
  LogsInfo logs = 5;
  int64 leader_commit = 6;
}

message LogsInfo {
  int64 index = 1;
  int64 count = 2;
  repeated string uid_list = 3;
  map<string,UAVInfo> uav_map = 4;
}

message AppendLogResp {
  string code = 1;
  int64  term = 2;
  string leader_uid = 3;
}

message VoteReq {
  int64 term = 1;
  string candidate_uid = 2;
  int64 last_log_index = 3;
  int64 last_log_term = 4;
}

message VoteResp {
  int64 term = 1;
  string leader_uid = 2;
  bool vote_granted = 3;
}

message GlobalLoadBalanceReq {
  repeated Task task_list = 1;
}

message GlobalLoadBalanceResp {
  string code = 1;
}

service RaftService {
  rpc SendUAVInfo(SendUAVInfoReq) returns(SendUAVInfoResp);
  rpc AppendLog(AppendLogReq) returns(AppendLogResp);
  rpc Vote(VoteReq) returns(VoteResp);
  rpc GlobalLoadBalance(GlobalLoadBalanceReq) returns(GlobalLoadBalanceResp);
}


