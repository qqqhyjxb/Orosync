// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: internal/rpc/proto/simulation.proto

package simulation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SimulationService_DroneStatus_FullMethodName      = "/rpc.v1.SimulationService/DroneStatus"
	SimulationService_DroneSwarmChange_FullMethodName = "/rpc.v1.SimulationService/DroneSwarmChange"
	SimulationService_TasksSend_FullMethodName        = "/rpc.v1.SimulationService/TasksSend"
	SimulationService_AddTask_FullMethodName          = "/rpc.v1.SimulationService/AddTask"
	SimulationService_TaskAssignment_FullMethodName   = "/rpc.v1.SimulationService/TaskAssignment"
)

// SimulationServiceClient is the client API for SimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务接口，无人机传输状态并接受任务
type SimulationServiceClient interface {
	// 传输无人机状态
	DroneStatus(ctx context.Context, in *DroneStatusRequest, opts ...grpc.CallOption) (*DroneStatusResponse, error)
	// 无人机集群变更
	DroneSwarmChange(ctx context.Context, in *DroneSwarmChangeRequest, opts ...grpc.CallOption) (*DroneSwarmChangeResponse, error)
	// 传输任务信息
	TasksSend(ctx context.Context, in *TasksSendRequest, opts ...grpc.CallOption) (*TasksSendResponse, error)
	// 添加任务
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	// 任务分配结果
	TaskAssignment(ctx context.Context, in *TaskAssignmentRequest, opts ...grpc.CallOption) (*TaskAssignmentResponse, error)
}

type simulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSimulationServiceClient(cc grpc.ClientConnInterface) SimulationServiceClient {
	return &simulationServiceClient{cc}
}

func (c *simulationServiceClient) DroneStatus(ctx context.Context, in *DroneStatusRequest, opts ...grpc.CallOption) (*DroneStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DroneStatusResponse)
	err := c.cc.Invoke(ctx, SimulationService_DroneStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) DroneSwarmChange(ctx context.Context, in *DroneSwarmChangeRequest, opts ...grpc.CallOption) (*DroneSwarmChangeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DroneSwarmChangeResponse)
	err := c.cc.Invoke(ctx, SimulationService_DroneSwarmChange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) TasksSend(ctx context.Context, in *TasksSendRequest, opts ...grpc.CallOption) (*TasksSendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TasksSendResponse)
	err := c.cc.Invoke(ctx, SimulationService_TasksSend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, SimulationService_AddTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simulationServiceClient) TaskAssignment(ctx context.Context, in *TaskAssignmentRequest, opts ...grpc.CallOption) (*TaskAssignmentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskAssignmentResponse)
	err := c.cc.Invoke(ctx, SimulationService_TaskAssignment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimulationServiceServer is the server API for SimulationService service.
// All implementations must embed UnimplementedSimulationServiceServer
// for forward compatibility.
//
// 服务接口，无人机传输状态并接受任务
type SimulationServiceServer interface {
	// 传输无人机状态
	DroneStatus(context.Context, *DroneStatusRequest) (*DroneStatusResponse, error)
	// 无人机集群变更
	DroneSwarmChange(context.Context, *DroneSwarmChangeRequest) (*DroneSwarmChangeResponse, error)
	// 传输任务信息
	TasksSend(context.Context, *TasksSendRequest) (*TasksSendResponse, error)
	// 添加任务
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	// 任务分配结果
	TaskAssignment(context.Context, *TaskAssignmentRequest) (*TaskAssignmentResponse, error)
	mustEmbedUnimplementedSimulationServiceServer()
}

// UnimplementedSimulationServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSimulationServiceServer struct{}

func (UnimplementedSimulationServiceServer) DroneStatus(context.Context, *DroneStatusRequest) (*DroneStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DroneStatus not implemented")
}
func (UnimplementedSimulationServiceServer) DroneSwarmChange(context.Context, *DroneSwarmChangeRequest) (*DroneSwarmChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DroneSwarmChange not implemented")
}
func (UnimplementedSimulationServiceServer) TasksSend(context.Context, *TasksSendRequest) (*TasksSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TasksSend not implemented")
}
func (UnimplementedSimulationServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedSimulationServiceServer) TaskAssignment(context.Context, *TaskAssignmentRequest) (*TaskAssignmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskAssignment not implemented")
}
func (UnimplementedSimulationServiceServer) mustEmbedUnimplementedSimulationServiceServer() {}
func (UnimplementedSimulationServiceServer) testEmbeddedByValue()                           {}

// UnsafeSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimulationServiceServer will
// result in compilation errors.
type UnsafeSimulationServiceServer interface {
	mustEmbedUnimplementedSimulationServiceServer()
}

func RegisterSimulationServiceServer(s grpc.ServiceRegistrar, srv SimulationServiceServer) {
	// If the following call pancis, it indicates UnimplementedSimulationServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SimulationService_ServiceDesc, srv)
}

func _SimulationService_DroneStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DroneStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).DroneStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_DroneStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).DroneStatus(ctx, req.(*DroneStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_DroneSwarmChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DroneSwarmChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).DroneSwarmChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_DroneSwarmChange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).DroneSwarmChange(ctx, req.(*DroneSwarmChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_TasksSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TasksSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).TasksSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_TasksSend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).TasksSend(ctx, req.(*TasksSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimulationService_TaskAssignment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskAssignmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimulationServiceServer).TaskAssignment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SimulationService_TaskAssignment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimulationServiceServer).TaskAssignment(ctx, req.(*TaskAssignmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SimulationService_ServiceDesc is the grpc.ServiceDesc for SimulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.v1.SimulationService",
	HandlerType: (*SimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DroneStatus",
			Handler:    _SimulationService_DroneStatus_Handler,
		},
		{
			MethodName: "DroneSwarmChange",
			Handler:    _SimulationService_DroneSwarmChange_Handler,
		},
		{
			MethodName: "TasksSend",
			Handler:    _SimulationService_TasksSend_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _SimulationService_AddTask_Handler,
		},
		{
			MethodName: "TaskAssignment",
			Handler:    _SimulationService_TaskAssignment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/rpc/proto/simulation.proto",
}
